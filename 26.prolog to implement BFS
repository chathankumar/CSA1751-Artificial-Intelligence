% Define the edges of the graph as facts: edge(Node1, Node2)
edge(a, b).
edge(a, c).
edge(b, d).
edge(b, e).
edge(c, f).
edge(d, g).
edge(e, h).
edge(f, i).

% Bidirectional edges
connected(X, Y) :- edge(X, Y).
connected(X, Y) :- edge(Y, X).

% BFS Algorithm
bfs(Start, Goal, Path) :-
    bfs_queue([[Start]], Goal, Path).

% Helper predicate for BFS using a queue (First-In, First-Out)
bfs_queue([[Goal|Rest]|_], Goal, Path) :-
    reverse([Goal|Rest], Path).

bfs_queue([CurrentPath|OtherPaths], Goal, Path) :-
    CurrentPath = [CurrentNode|_],
    findall([NextNode|CurrentPath],
            (connected(CurrentNode, NextNode), \+ member(NextNode, CurrentPath)),
            NewPaths),
    append(OtherPaths, NewPaths, UpdatedPaths),
    bfs_queue(UpdatedPaths, Goal, Path).

% Reverse the path to get the correct order
reverse([], []).
reverse([H|T], Rev) :-
    reverse(T, RevT),
    append(RevT, [H], Rev).
